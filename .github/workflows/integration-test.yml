name: Integration tests

on:
  push:
    branches: [ "main", "dev", "testing" ]
  pull_request:
    branches: [ "main" ]

env:
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock

jobs:
  api-testing:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['22.x']

    services:
      mariadb:
        image: mariadb:10.9.4
        env:
          MARIADB_ROOT_PASSWORD: ${{ secrets.DB_PASS }}.
          MARIADB_DATABASE: epublit_test
          MARIADB_USER: ${{ secrets.DB_USER }}
          MARIADB_PASSWORD: ${{ secrets.DB_PASS }}
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=5
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.8'

    - name: Set system timezone
      run: |
        sudo ln -fs /usr/share/zoneinfo/America/Buenos_Aires /etc/localtime
        echo "America/Buenos_Aires" | sudo tee /etc/timezone
        date

    - name: Load test data
      run:  mysql -h"127.0.0.1" -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASS }} < ./db/test.sql

    - name: Show databases
      run:  mysql -h"127.0.0.1" -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASS }} -e "SHOW DATABASES; USE epublit_test; SHOW TABLES;"

    - name: Prepare .env file
      run: echo "$ENV_FILE_CONTENT" > .env
      env:
        ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}

    - name: Create files folders
      run: |
        mkdir -p files/facturas
        mkdir -p files/remitos
        mkdir -p files/logos

    - name: Create mock afip credentials
      run: |
        mkdir afipkeys
        cd afipkeys
        mkdir -p 20434919798/Tokens
        touch 20434919798/cert.pem 20434919798/private_key.key

        mkdir -p 27249804024/Tokens
        touch 27249804024/cert.crt 27249804024/private_key.key

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npx jest

  deploy:
    needs: [api-testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH private key and passphrase
        env:
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSWORD }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          echo 'echo $SSH_PASSPHRASE' > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null

      - name: Print ssh-add identities
        run: ssh-add -l

      - name: Deploy to the server
        run: |
          # Copying files
          scp -o StrictHostKeyChecking=no \
            -r src/ types/ package.json tsconfig.json Dockerfile docker-compose.yml $SERVER_HOST:$DEPLOY_PATH

          # Write .env file
          ssh -o StrictHostKeyChecking=no $SERVER_HOST \
            "echo '$ENV_FILE_CONTENT' > $DEPLOY_PATH/.env"

          # Deploy the api with docker
          ssh -o StrictHostKeyChecking=no $SERVER_HOST \
            "cd $DEPLOY_PATH && pwd && \
            docker compose down && \
            docker compose build && \
            docker compose up -d"

        env:
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}
          SERVER_HOST: ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
