name: unit testing

on:
  push:
    branches: [ "testing" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  api-testing:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '21.x'
        
    - name: Install dependencies
      run: | 
        cd api
        npm install

    - name: Prepare .env file
      run: echo "$ENV_FILE_CONTENT" > .env
      env:
        ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}

    - name: Load afip testing tokens
      run: |
        mkdir -p api/afipkeys
        cd api/afipkeys
        mkdir -p 20434919798/Tokens
        echo "$AFIP_CERT" > 20434919798/cert.pem
        echo "$AFIP_KEY" > 20434919798/private_key.key
        sha1sum 20434919798/cert.pem
        sha1sum 20434919798/private_key.key

        mkdir -p 27249804024/Tokens
        echo "$AFIP_CERT_PROD" > 27249804024/cert.crt
        echo "$AFIP_KEY_PROD" > 27249804024/private_key.key
        sha1sum 27249804024/cert.crt
        sha1sum 27249804024/private_key.key
      env:
        AFIP_CERT: ${{ secrets.AFIP_CERT }}
        AFIP_KEY: ${{ secrets.AFIP_KEY }}
        AFIP_CERT_PROD: ${{ secrets.AFIP_CERT_PROD }}
        AFIP_KEY_PROD: ${{ secrets.AFIP_KEY_PROD }}

    - name: Build and start backend services
      run: |
        docker compose build api
        docker compose up -d api

    - name: Wait for backend to start
      run: sleep 15  # Asegúrate de esperar el tiempo necesario para que la API del backend esté lista para recibir peticiones

      #- name: Show databases
      #run:  docker compose exec mysqldb mysql -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASS }} -e "SHOW DATABASES; USE epublit_test; SHOW TABLES;"

    - name: Run tests
      run: |
        cd api
        chmod +x setuptest.sh 
        npm run test
      env: 
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASS: ${{ secrets.DB_PASS }}
        DB_PORT: 3306
        DB_NAME: epublit_test
